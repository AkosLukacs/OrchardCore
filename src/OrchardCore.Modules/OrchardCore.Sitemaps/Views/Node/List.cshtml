@model SitemapNodeListViewModel
@inject OrchardCore.DisplayManagement.IDisplayManager<SitemapNode> SitemapNodeDisplayManager
@inject OrchardCore.DisplayManagement.ModelBinding.IUpdateModelAccessor ModelUpdaterAccessor

@{
    var index = 0;
}

<script asp-src="~/OrchardCore.Sitemaps/Scripts/sitemaps.min.js" at="Foot" depends-on="admin"></script>
<style asp-src="~/OrchardCore.Sitemaps/Styles/sitemaps.min.css" debug-src="~/OrchardCore.Sitemaps/Styles/sitemaps.css"></style>

<h1>@RenderTitleSegments(T["Edit Nodes for '{0}'", Model.SitemapSet.Name])</h1>

<nav class="admin-toolbar">
    <ul class="navbar-nav mr-auto">
        <li class="nav-item">
            <!-- Button trigger modal -->
            <a asp-route-action="Create" class="btn btn-primary" role="button" data-toggle="modal" data-target="#modalSitemapNodes">
                @T["Add Node"]
            </a>
        </li>
    </ul>
</nav>

<div asp-validation-summary="All"></div>

<form id="presetForm" asp-action="List">
    <div class="form-group">
        @if (Model.SitemapSet.SitemapNodes.Any())
        {
            var updater = ModelUpdaterAccessor.ModelUpdater;

            <ol id="sitemap-node" data-sitemap-node-id="content-preset">
                @foreach (var sitemapNode in Model.SitemapSet.SitemapNodes)
                {
                    if (sitemapNode != null)
                    {
                        dynamic sitemapNodeShape = await SitemapNodeDisplayManager.BuildDisplayAsync(sitemapNode, updater, "TreeSummary");
                        sitemapNodeShape.SitemapSetId = Model.SitemapSet.Id;
                        sitemapNodeShape.SitemapNode = sitemapNode;
                        sitemapNodeShape.Index = index++;
                        @await DisplayAsync(sitemapNodeShape)
                    }
                }
            </ol>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                @T["<strong>Nothing here!</strong> There are no sitemap nodes on this sitemap set for the moment."]
            </div>
        }
    </div>

    <div class="form-group">
        <a class="btn btn-secondary" asp-route-controller="Set" asp-route-action="List">@T["Back"]</a>
    </div>

</form>

<!-- Modal -->
<div class="modal fade" id="modalSitemapNodes" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@T["Available Sitemap Nodes"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card-columns">
                    @foreach (var thumbnail in Model.Thumbnails)
                    {
                        thumbnail.Value.ContentTreePreset = Model.SitemapSet;
                        thumbnail.Value.Type = thumbnail.Key;
                        @await DisplayAsync(thumbnail.Value)
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@T["Cancel"]</button>
            </div>
        </div>
    </div>
</div>


<div id="move-error-message" class="d-none" data-message="@T["There was an error when moving the sitemap node."]"></div>

<script at="Foot">
    function moveNode(sitemapSetId, nodeToMoveId, destinationNodeId, position) {
        var url = "@Url.Action("MoveNode", "Node", new { area = "OrchardCore.Sitemaps"})";
        $.ajax({
            url: url,
            method: 'POST',
            data: {
                __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
                sitemapSetId: sitemapSetId,
                nodeToMoveId: nodeToMoveId,
                destinationNodeId: destinationNodeId,
                position: position
            },
            success: function () {
                location.reload(true);
            },
            error: function (error) {                
                alert($('#move-error-message').data("message"));
            }
        });
    }

    $(function () {
        $('#sitemap-node')
            .nestedSortable({
                handle: 'div.sitemap-node-title',
                items: 'li.sitemap-node',
                toleranceElement: '> div.sitemap-node-title',
                disableNestingClass: 'cannot-support-child-nodes',
                isAllowed: function (item, parent) {
                    return !$(item).hasClass('cannot-be-child');
                },
                relocate: function (event, helper) {
                    // get var required by rest api
                    var sitemapSetId = '@Model.SitemapSet.Id';
                    var nodeToMoveId = helper.item.data('sitemap-node-id');
                    var destinationNodeId = helper.item.parent().closest('[data-sitemap-node-id]').data('sitemap-node-id'); // get the id of the new parent
                    var position = helper.item.index();

                    // make request to rest api
                    moveNode(sitemapSetId, nodeToMoveId, destinationNodeId, position);
                }
            });
    });
</script>
